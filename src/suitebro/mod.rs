use serde::{Deserialize, Serialize};
use uesave::{read_array, Properties, Readable, Types, Writable};

use byteorder::{ReadBytesExt, WriteBytesExt, LE};
use std::io::{Cursor, Read, Seek, Write};

use self::item::Item;

pub mod item;

const SUITEBRO_MAGIC: &[u8; 8] = b"suitebro";

pub struct SuiteBro {
    pub header: Header,
    pub items: Vec<Item>,
    pub properties: Vec<PropertyList>,
    pub groups: Vec<GroupInfo>,
}

impl<R: Read + Seek> Readable<R> for SuiteBro {
    fn read(reader: &mut uesave::Context<R>) -> uesave::TResult<Self> {
        let header = Header::read(reader)?;
        let item_count = reader.read_u32::<LE>()?;
        let items = read_array(item_count, reader, Item::read)?;
        let property_count = reader.read_u32::<LE>()?;
        let properties = read_array(property_count, reader, PropertyList::read)?;
        let _unknown_count = reader.read_u32::<LE>();
        let group_count = reader.read_u32::<LE>()?;
        let groups = read_array(group_count, reader, GroupInfo::read)?;

        Ok(Self {
            header,
            items,
            properties,
            groups,
        })
    }
}

impl<R: Write + Seek> Writable<R> for SuiteBro {
    fn write(&self, writer: &mut uesave::Context<R>) -> uesave::TResult<()> {
        self.header.write(writer)?;
        writer.write_u32::<LE>(self.items.len() as u32)?;
        for item in &self.items {
            item.write(writer)?;
        }
        writer.write_u32::<LE>(self.properties.len() as u32)?;
        for property in &self.properties {
            property.write(writer)?;
        }
        writer.write_u32::<LE>(1)?;
        writer.write_u32::<LE>(self.groups.len() as u32)?;
        for group in &self.groups {
            group.write(writer)?;
        }   
        Ok(())
    }
}

#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, PartialOrd, Ord)]
pub struct Header {
    pub format_version: u32,
    pub unreal_version: u32,
}

impl<R: Read + Seek> Readable<R> for Header {
    fn read(reader: &mut uesave::Context<R>) -> uesave::TResult<Self> {
        let magic = reader.read_u64::<LE>()?;
        if magic != u64::from_le_bytes(*SUITEBRO_MAGIC) {
            return Err(uesave::Error::BadMagic(
                String::from_utf8_lossy(&magic.to_le_bytes()).to_string(),
            ));
        }

        let format_version = reader.read_u32::<LE>()?;
        let unreal_version = reader.read_u32::<LE>()?;

        Ok(Header {
            format_version,
            unreal_version,
        })
    }
}

impl<R: Write + Seek> Writable<R> for Header {
    fn write(&self, writer: &mut uesave::Context<R>) -> uesave::TResult<()> {
        writer.write_all(SUITEBRO_MAGIC)?;
        writer.write_u32::<LE>(self.format_version)?;
        writer.write_u32::<LE>(self.unreal_version)?;
        Ok(())
    }
}

#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub struct PropertyList {
    pub name: String,
    pub properties: Properties,
}

impl<R: Read + Seek> Readable<R> for PropertyList {
    fn read(reader: &mut uesave::Context<R>) -> uesave::TResult<Self> {
        let name = uesave::read_string(reader)?;
        let properties = {
            let size = reader.read_u32::<LE>()?;
            let mut buf = vec![0u8; size as usize];
            reader.read_exact(&mut buf)?;
            reader.stream(&mut Cursor::new(buf), |reader| {
                let properties = uesave::read_properties_until_none(reader);
                debug_assert_eq!(reader.read_u32::<LE>()?, 0);
                properties
            })?
        };
        Ok(PropertyList { name, properties })
    }
}

impl<W: Write + Seek> Writable<W> for PropertyList {
    fn write(&self, writer: &mut uesave::Context<W>) -> uesave::TResult<()> {
        uesave::write_string(writer, &self.name)?;

        let mut buf = vec![];
        writer.stream(&mut buf, |writer| -> uesave::TResult<()> {
            uesave::write_properties_none_terminated(writer, &self.properties)?;
            writer.write_u32::<LE>(0)?; // unknown seperator
            Ok(())
        })?;
        writer.write_u32::<LE>(buf.len() as u32)?;
        writer.write_all(&mut buf)?;

        Ok(())
    }
}

#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub struct GroupInfo {
    item_count: u32,
    group_id: u32,
}

impl<R: Read + Seek> Readable<R> for GroupInfo {
    fn read(reader: &mut uesave::Context<R>) -> uesave::TResult<Self> {
        let item_count = reader.read_u32::<LE>()?;
        let group_id = reader.read_u32::<LE>()?;

        Ok(GroupInfo {
            item_count,
            group_id,
        })
    }
}

impl<R: Write + Seek> Writable<R> for GroupInfo {
    fn write(&self, writer: &mut uesave::Context<R>) -> uesave::TResult<()> {
        writer.write_u32::<LE>(self.item_count)?;
        writer.write_u32::<LE>(self.group_id)?;
        Ok(())
    }
}

pub fn get_tower_types() -> Types {
    let types = Types::new();
    types
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    use std::error::Error;

    macro_rules! test_rw {
        ($name:ident, $ty:ty, $input:expr) => {
            #[test]
            fn $name() -> Result<(), Box<dyn Error>> {
                let input = $input;
                let mut reader = Cursor::new(&input);

                let mut output = vec![];
                let mut writer = Cursor::new(&mut output);
                let value =
                    uesave::Context::run_with_types(&get_tower_types(), &mut reader, |ctx| {
                        <$ty as Readable<_>>::read(ctx)
                    })
                    .expect("error reading");
                uesave::Context::run_with_types(&get_tower_types(), &mut writer, |ctx| {
                    <$ty as Writable<_>>::write(&value, ctx)
                })
                .expect("error writing");

                assert_eq!(&input[..], &output[..]);

                Ok(())
            }
        };
    }

    test_rw!(
        test_header,
        Header,
        [
            0x73, 0x75, 0x69, 0x74, 0x65, 0x62, 0x72, 0x6F, 0x01, 0x00, 0x00, 0x00, 0x05, 0x02,
            0x00, 0x00,
        ]
    );

    test_rw!(
        test_property,
        PropertyList,
        [
            0x12, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x6E, 0x64, 0x6F, 0x57, 0x65, 0x61, 0x74, 0x68,
            0x65, 0x72, 0x5F, 0x32, 0x37, 0x32, 0x39, 0x00, 0x49, 0x03, 0x00, 0x00, 0x18, 0x00,
            0x00, 0x00, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6F, 0x6E, 0x66, 0x69,
            0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x4E, 0x65, 0x77, 0x00, 0x0F, 0x00,
            0x00, 0x00, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72,
            0x74, 0x79, 0x00, 0x63, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00,
            0x00, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4D, 0x61, 0x6E, 0x69, 0x66, 0x65,
            0x73, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
            0x00, 0x43, 0x6C, 0x6F, 0x75, 0x64, 0x49, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74,
            0x79, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F,
            0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x46, 0x6F, 0x67, 0x49, 0x6E,
            0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C,
            0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,
            0x00, 0x52, 0x61, 0x69, 0x6E, 0x49, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79,
            0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70,
            0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x54, 0x68, 0x75, 0x6E, 0x64, 0x65,
            0x72, 0x49, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x00, 0x0E, 0x00, 0x00,
            0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x00, 0x00, 0x00, 0x53, 0x6E, 0x6F, 0x77, 0x49, 0x6E, 0x74, 0x65, 0x6E, 0x73,
            0x69, 0x74, 0x79, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50,
            0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x48, 0x61, 0x69,
            0x6C, 0x49, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x00, 0x0E, 0x00, 0x00,
            0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x64, 0x49, 0x6E, 0x74, 0x65, 0x6E, 0x73,
            0x69, 0x74, 0x79, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50,
            0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x4E, 0x6F, 0x6E,
            0x65, 0x00, 0x16, 0x00, 0x00, 0x00, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x54,
            0x72, 0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x69, 0x6D, 0x65, 0x00,
            0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65,
            0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x20, 0x41, 0x16, 0x00, 0x00, 0x00, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
            0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6C,
            0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70,
            0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xF0, 0x41, 0x1E, 0x00, 0x00, 0x00, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
            0x72, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E,
            0x43, 0x68, 0x65, 0x63, 0x6B, 0x6C, 0x69, 0x73, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x00,
            0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
            0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x42, 0x6F,
            0x6F, 0x6C, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x00, 0x18, 0x00,
            0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1C, 0x00,
            0x00, 0x00, 0x54, 0x72, 0x75, 0x6C, 0x79, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x57,
            0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F,
            0x6E, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x42, 0x6F, 0x6F, 0x6C, 0x50, 0x72, 0x6F, 0x70,
            0x65, 0x72, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x15, 0x00, 0x00, 0x00, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x79,
            0x63, 0x6C, 0x65, 0x72, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x00, 0x0D, 0x00,
            0x00, 0x00, 0x42, 0x6F, 0x6F, 0x6C, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,
            0x00, 0x62, 0x43, 0x61, 0x6E, 0x42, 0x65, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x64,
            0x00, 0x0D, 0x00, 0x00, 0x00, 0x42, 0x6F, 0x6F, 0x6C, 0x50, 0x72, 0x6F, 0x70, 0x65,
            0x72, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );

    // test_rw!(
    //     test_suitebro,
    //     SuiteBro,
    //     include_bytes!("../../assets/OneItem")
    // );
}
